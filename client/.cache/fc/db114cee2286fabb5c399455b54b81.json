{"id":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","dependencies":[{"name":"/Users/memarian/Documents/ov/oeo-viewer/client/package.json","includedInParent":true,"mtime":1652294789744},{"name":"/Users/memarian/Documents/ov/oeo-viewer/client/.babelrc","includedInParent":true,"mtime":1652294789738},{"name":"/Users/memarian/Documents/ov/oeo-viewer/client/node_modules/ngraph.forcelayout/package.json","includedInParent":true,"mtime":1652294858703},{"name":"./createPatternBuilder","loc":{"line":1,"column":37},"parent":"/Users/memarian/Documents/ov/oeo-viewer/client/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","resolved":"/Users/memarian/Documents/ov/oeo-viewer/client/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js"},{"name":"./getVariableName","loc":{"line":2,"column":32},"parent":"/Users/memarian/Documents/ov/oeo-viewer/client/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","resolved":"/Users/memarian/Documents/ov/oeo-viewer/client/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js"}],"generated":{"js":"const createPatternBuilder = require('./createPatternBuilder');\nconst getVariableName = require('./getVariableName');\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;\n\n// These exports are for InlineTransform tool.\n// InlineTransform: getInsertStackCode\nmodule.exports.getInsertStackCode = getInsertStackCode;\n// InlineTransform: getQuadNodeCode\nmodule.exports.getQuadNodeCode = getQuadNodeCode;\n// InlineTransform: isSamePosition\nmodule.exports.isSamePosition = isSamePosition;\n// InlineTransform: getChildBodyCode\nmodule.exports.getChildBodyCode = getChildBodyCode;\n// InlineTransform: setChildBodyCode\nmodule.exports.setChildBodyCode = setChildBodyCode;\n\nfunction generateQuadTreeFunction(dimension) {\n  let code = generateQuadTreeFunctionBody(dimension);\n  return (new Function(code))();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n\n  let code = `\n${getInsertStackCode()}\n${getQuadNodeCode(dimension)}\n${isSamePosition(dimension)}\n${getChildBodyCode(dimension)}\n${setChildBodyCode(dimension)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${assignQuads('      node.')}\n      node.body = null;\n      node.mass = ${pattern('node.mass_{var} = ', {join: ''})}0;\n      ${pattern('node.min_{var} = node.max_{var} = ', {join: ''})}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${pattern('var d{var};', {indent: 4})}\n    var r; \n    ${pattern('var f{var} = 0;', {indent: 4})}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${pattern('f{var} += v * d{var};', {indent: 8})}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n        // If s / r < Î¸, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${pattern('f{var} += v * d{var};', {indent: 10})}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${runRecursiveOnChildren()}\n        }\n      }\n    }\n\n    ${pattern('sourceBody.force.{var} += f{var};', {indent: 4})}\n  }\n\n  function insertBodies(bodies) {\n    ${pattern('var {var}min = Number.MAX_VALUE;', {indent: 4})}\n    ${pattern('var {var}max = Number.MIN_VALUE;', {indent: 4})}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {indent: 6})}\n      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {indent: 6})}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {indent: 4})}\n\n    currentInCache = 0;\n    root = newNode();\n    ${pattern('root.min_{var} = {var}min;', {indent: 4})}\n    ${pattern('root.max_{var} = {var}min + maxSideLength;', {indent: 4})}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${pattern('var {var} = body.pos.{var};', {indent: 8})}\n        node.mass += body.mass;\n        ${pattern('node.mass_{var} += body.mass * {var};', {indent: 8})}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${pattern('var min_{var} = node.min_{var};', {indent: 8})}\n        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {indent: 8})}\n\n${assignInsertionQuadIndex(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${pattern('child.min_{var} = min_{var};', {indent: 10})}\n          ${pattern('child.max_{var} = max_{var};', {indent: 10})}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {indent: 12})}\n\n            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {indent: 12})}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\nreturn createQuadTree;\n\n`;\n  return code;\n\n\n  function assignInsertionQuadIndex(indentCount) {\n    let insertionCode = [];\n    let indent = Array(indentCount + 1).join(' ');\n    for (let i = 0; i < dimension; ++i) {\n      insertionCode.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`);\n      insertionCode.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);\n      insertionCode.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);\n      insertionCode.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);\n      insertionCode.push(indent + `}`);\n    }\n    return insertionCode.join('\\n');\n    // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    let indent = Array(11).join(' ');\n    let recursiveCode = [];\n    for (let i = 0; i < quadCount; ++i) {\n      recursiveCode.push(indent + `if (node.quad${i}) {`);\n      recursiveCode.push(indent + `  queue[pushIdx] = node.quad${i};`);\n      recursiveCode.push(indent + `  queueLength += 1;`);\n      recursiveCode.push(indent + `  pushIdx += 1;`);\n      recursiveCode.push(indent + `}`);\n    }\n    return recursiveCode.join('\\n');\n    // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction isSamePosition(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  return `\n  function isSamePosition(point1, point2) {\n    ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {indent: 2})}\n  \n    return ${pattern('d{var} < 1e-8', {join: ' && '})};\n  }  \n`;\n}\n\nfunction setChildBodyCode(dimension) {\n  var quadCount = Math.pow(2, dimension);\n  return `\nfunction setChild(node, idx, child) {\n  ${setChildBody()}\n}`;\n  function setChildBody() {\n    let childBody = [];\n    for (let i = 0; i < quadCount; ++i) {\n      let prefix = (i === 0) ? '  ' : '  else ';\n      childBody.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n}\n\nfunction getChildBodyCode(dimension) {\n  return `function getChild(node, idx) {\n${getChildBody()}\n  return null;\n}`;\n\n  function getChildBody() {\n    let childBody = [];\n    let quadCount = Math.pow(2, dimension);\n    for (let i = 0; i < quadCount; ++i) {\n      childBody.push(`  if (idx === ${i}) return node.quad${i};`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n}\n\nfunction getQuadNodeCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n  var quadNodeCode = `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${assignQuads('  this.')}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${pattern('this.mass_{var} = 0;', {indent: 2})}\n\n  // bounding box coordinates\n  ${pattern('this.min_{var} = 0;', {indent: 2})}\n  ${pattern('this.max_{var} = 0;', {indent: 2})}\n}\n`;\n  return quadNodeCode;\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction getInsertStackCode() {\n  return `\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n`;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}}],"sources":{"../node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js":"const createPatternBuilder = require('./createPatternBuilder');\nconst getVariableName = require('./getVariableName');\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;\n\n// These exports are for InlineTransform tool.\n// InlineTransform: getInsertStackCode\nmodule.exports.getInsertStackCode = getInsertStackCode;\n// InlineTransform: getQuadNodeCode\nmodule.exports.getQuadNodeCode = getQuadNodeCode;\n// InlineTransform: isSamePosition\nmodule.exports.isSamePosition = isSamePosition;\n// InlineTransform: getChildBodyCode\nmodule.exports.getChildBodyCode = getChildBodyCode;\n// InlineTransform: setChildBodyCode\nmodule.exports.setChildBodyCode = setChildBodyCode;\n\nfunction generateQuadTreeFunction(dimension) {\n  let code = generateQuadTreeFunctionBody(dimension);\n  return (new Function(code))();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n\n  let code = `\n${getInsertStackCode()}\n${getQuadNodeCode(dimension)}\n${isSamePosition(dimension)}\n${getChildBodyCode(dimension)}\n${setChildBodyCode(dimension)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${assignQuads('      node.')}\n      node.body = null;\n      node.mass = ${pattern('node.mass_{var} = ', {join: ''})}0;\n      ${pattern('node.min_{var} = node.max_{var} = ', {join: ''})}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${pattern('var d{var};', {indent: 4})}\n    var r; \n    ${pattern('var f{var} = 0;', {indent: 4})}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${pattern('f{var} += v * d{var};', {indent: 8})}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n        // If s / r < Î¸, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${pattern('f{var} += v * d{var};', {indent: 10})}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${runRecursiveOnChildren()}\n        }\n      }\n    }\n\n    ${pattern('sourceBody.force.{var} += f{var};', {indent: 4})}\n  }\n\n  function insertBodies(bodies) {\n    ${pattern('var {var}min = Number.MAX_VALUE;', {indent: 4})}\n    ${pattern('var {var}max = Number.MIN_VALUE;', {indent: 4})}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {indent: 6})}\n      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {indent: 6})}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {indent: 4})}\n\n    currentInCache = 0;\n    root = newNode();\n    ${pattern('root.min_{var} = {var}min;', {indent: 4})}\n    ${pattern('root.max_{var} = {var}min + maxSideLength;', {indent: 4})}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${pattern('var {var} = body.pos.{var};', {indent: 8})}\n        node.mass += body.mass;\n        ${pattern('node.mass_{var} += body.mass * {var};', {indent: 8})}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${pattern('var min_{var} = node.min_{var};', {indent: 8})}\n        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {indent: 8})}\n\n${assignInsertionQuadIndex(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${pattern('child.min_{var} = min_{var};', {indent: 10})}\n          ${pattern('child.max_{var} = max_{var};', {indent: 10})}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {indent: 12})}\n\n            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {indent: 12})}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\nreturn createQuadTree;\n\n`;\n  return code;\n\n\n  function assignInsertionQuadIndex(indentCount) {\n    let insertionCode = [];\n    let indent = Array(indentCount + 1).join(' ');\n    for (let i = 0; i < dimension; ++i) {\n      insertionCode.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`);\n      insertionCode.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);\n      insertionCode.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);\n      insertionCode.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);\n      insertionCode.push(indent + `}`);\n    }\n    return insertionCode.join('\\n');\n    // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    let indent = Array(11).join(' ');\n    let recursiveCode = [];\n    for (let i = 0; i < quadCount; ++i) {\n      recursiveCode.push(indent + `if (node.quad${i}) {`);\n      recursiveCode.push(indent + `  queue[pushIdx] = node.quad${i};`);\n      recursiveCode.push(indent + `  queueLength += 1;`);\n      recursiveCode.push(indent + `  pushIdx += 1;`);\n      recursiveCode.push(indent + `}`);\n    }\n    return recursiveCode.join('\\n');\n    // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction isSamePosition(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  return `\n  function isSamePosition(point1, point2) {\n    ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {indent: 2})}\n  \n    return ${pattern('d{var} < 1e-8', {join: ' && '})};\n  }  \n`;\n}\n\nfunction setChildBodyCode(dimension) {\n  var quadCount = Math.pow(2, dimension);\n  return `\nfunction setChild(node, idx, child) {\n  ${setChildBody()}\n}`;\n  function setChildBody() {\n    let childBody = [];\n    for (let i = 0; i < quadCount; ++i) {\n      let prefix = (i === 0) ? '  ' : '  else ';\n      childBody.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n}\n\nfunction getChildBodyCode(dimension) {\n  return `function getChild(node, idx) {\n${getChildBody()}\n  return null;\n}`;\n\n  function getChildBody() {\n    let childBody = [];\n    let quadCount = Math.pow(2, dimension);\n    for (let i = 0; i < quadCount; ++i) {\n      childBody.push(`  if (idx === ${i}) return node.quad${i};`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n}\n\nfunction getQuadNodeCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n  var quadNodeCode = `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${assignQuads('  this.')}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${pattern('this.mass_{var} = 0;', {indent: 2})}\n\n  // bounding box coordinates\n  ${pattern('this.min_{var} = 0;', {indent: 2})}\n  ${pattern('this.max_{var} = 0;', {indent: 2})}\n}\n`;\n  return quadNodeCode;\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction getInsertStackCode() {\n  return `\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n`;\n}"},"lineCount":461}},"error":null,"hash":"56c72c31ec7f0ec2be635bb290c3e5e5","cacheData":{"env":{}}}